version: 2.1   
commands:
  destroy-environment:
    description: "rollback all deployment if preceeding job fails"
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: roll backend
          when: on_fail
          command: |
            echo Destroying environment <<parameters.workflow-id>>
            aws ecr delete-repository --repository-name hello-java --force --region $AWS_REGION
jobs:
  compile:
    docker:
      - image: circleci/openjdk:11-buster-node-browsers-legacy
    steps:
      - checkout
      - run:
          name: Compile java application
          command: |
            cd backend
            javac hello.java
            ls -l
      - persist_to_workspace:
          root: backend
          paths:
            - ./

  build-image:
    machine:
     image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      # - setup_remote_docker:
      #     version: 20.10.14
      - run:
          name: "update repo"
          command: |
            sudo apt-get update
            sudo apt-get install ca-certificates curl gnupg lsb-release  
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
            sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg            
      # - run:
      #     name: "install unzip & awscli"
      #     command: |
      #       sudo apt install -y unzip
      #       sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       sudo unzip awscliv2.zip
      #       sudo ./aws/install 

      - run:
          name: "install tar and gzip to have workspace capability"
          command: |
            sudo apt install -y tar
            sudo apt install -y gzip
      - attach_workspace:
          at: backend
      - run:
          name: "remove old docker engine"
          command: sudo apt-get remove docker docker-engine docker.io containerd runc
      - run:
          name: "install docker"
          command: sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
      - run:
          name: "start docker"
          command:  sudo systemctl start docker            
      - run:
          name: Build Docker image with Dockerfile
          command: |
            cd backend
            sudo docker build -t hello-java .
      - run:
          name: "docker login to ECR"
          command: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 072056452537.dkr.ecr.us-east-1.amazonaws.com
      - run:
          name: Create image Repository on ECR
          command: aws ecr create-repository --repository-name hello-java --image-scanning-configuration scanOnPush=true --region $AWS_REGION
      - run:
          name: Tag and publish image to ECR
          command: |
             docker tag hello-java 072056452537.dkr.ecr.us-east-1.amazonaws.com/hello-java:v1.0.0
             docker push 072056452537.dkr.ecr.us-east-1.amazonaws.com/hello-java:v1.0.0
      - destroy-environment:
          workflow-id: ${CIRCLECI_WORKFLOW_ID:0:7}

  configure-server:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "f9:ec:09:4e:61:d0:b4:31:c8:bf:5e:39:bd:8b:df:06:3a:c8:7d:f4"
      - run:
          name: Install ansible and its dependencies on container
          command: |
            apk add --update ansible
            apk add --update  tar gzip
            apk add --update curl
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Configure EC2 server to pull docker image and run container
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat .circleci/ansible/inventory
            ansible-playbook .circleci/ansible/configure-server.yml  -i .circleci/ansible/inventory
      - destroy-environment:
          workflow-id: ${CIRCLECI_WORKFLOW_ID:0:7}
workflows:
  default4:
    jobs:
      - compile:
          filters:
            branches:
              only: [master]
      - build-image:
          requires: [compile]
      - configure-server:
          requires: [build-image]
